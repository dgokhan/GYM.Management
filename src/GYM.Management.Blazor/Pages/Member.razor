@page "/Member"

@using GYM.Management.Members;
@using GYM.Management.Permissions
@using GYM.Management.Trainers;
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using GYM.Management.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ManagementResource> L
@inherits AbpCrudPageBase<IMemberService, MemberDto, Guid, PagedAndSortedResultRequestDto, MemberCreateDto>
@inject IMemberService _memberService
@inject ITrainerService _trainerService
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Üyeler</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    Yeni Üye
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <div id="UserFilterSection" class="row mt-3">
            <Column ColumnSize="ColumnSize.Is12">
                <Field>
                    <FieldLabel>İsim</FieldLabel>
                    <TextEdit TValue="string" KeyPress="OnKeyPress" @bind-Text="@Filter.Name" />
                </Field>
            </Column>
        </div>
        <DataGrid TItem="MemberDto"
                  Data="MemberList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="MemberDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="MemberDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="MemberDto"
                                          Text="Güncelle"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="MemberDto"
                                          Text="Sil"
                                          Clicked="() => DeleteData(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.Name)"
                                Caption="İsim"></DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.Surname)"
                                Caption="Soy İsim"></DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.CreationTime)"
                                Caption="Eklenme Tarihi">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.TrainerName)"
                                Caption="Antrenör"></DataGridColumn>

                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.BirdthDate)"
                                Caption="Doğum Tarihi">
                    <DisplayTemplate>
                        @context.BirdthDate.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>Yeni Üye</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Soy İsim</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Surname">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Telefon</FieldLabel>
                            <TextEdit onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57) || ((event.target.value + String.fromCharCode(charCode)).length>10" @bind-Text="@NewEntity.Telephone">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>Doğum Tarihi</FieldLabel>
                        <DatePicker TValue="DateTime" @bind-Date="NewEntity.BirdthDate" />
                    </Field>
                    <Field>
                        <FieldLabel>Antenör Seçimi</FieldLabel>
                        <Select TValue="Guid?" @bind-SelectedValue="@NewEntity.TrainerId">
                            @foreach (var item in TrainerList)
                            {
                                <SelectItem TValue="Guid" Value="@item.Id">
                                    @item.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="AddData">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Soyisim</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Surname">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Telefon</FieldLabel>
                            <TextEdit onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57) || ((event.target.value + String.fromCharCode(charCode)).length>10" @bind-Text="@NewEntity.Telephone">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>Doğum Tarihi</FieldLabel>
                        <DatePicker TValue="DateTime" @bind-Date="EditingEntity.BirdthDate" />
                    </Field>
                </Validations>
                <Field>
                    <FieldLabel>Antenör Seçimi</FieldLabel>
                    <Select TValue="Guid?" @bind-SelectedValue="@EditingEntity.TrainerId">
                        @foreach (var item in TrainerList)
                        {
                            <SelectItem TValue="Guid" Value="@item.Id">
                                @item.Name
                            </SelectItem>
                        }
                    </Select>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="EditData">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@code {
    private IReadOnlyList<MemberDto> MemberList { get; set; } = new List<MemberDto>();
    private IReadOnlyList<TrainerDto> TrainerList { get; set; } = new List<TrainerDto>();
    private GetMemberListInput Filter { get; set; } = new GetMemberListInput();
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;

    protected virtual async Task OnDataGridReadAsync(DataGridReadDataEventArgs<MemberDto> e)
    {
        //var result = await _exerciseService.GetListAsync(Filter);
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.SortField + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page;
        Filter.MaxResultCount = PageSize;
        Filter.SkipCount = (CurrentPage - 1) * PageSize;
        Filter.Sorting = CurrentSorting;
        var result = await _memberService.GetListAsync(Filter);
        MemberList = result.Items;
        TotalCount = (int)result.TotalCount;
        //await GetEntitiesAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Filter.MaxResultCount = PageSize;
            Filter.SkipCount = (CurrentPage - 1) * PageSize;
            Filter.Sorting = CurrentSorting;
            var result = await _memberService.GetListAsync(Filter);
            MemberList = result.Items;
            TotalCount = (int)result.TotalCount;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        //var result = await _exerciseService.GetListAsync(Filter);
        Filter.MaxResultCount = PageSize;
        Filter.SkipCount = 0;
        Filter.Sorting = CurrentSorting;
        var result = await _memberService.GetListAsync(Filter);
        TrainerList = await _trainerService.GetAllTrainerForMember();
        MemberList = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    private async Task DeleteData(MemberDto dto)
    {
        try
        {
            await _memberService.DeleteAsync(dto.Id);
            var result = await _memberService.GetListAsync(Filter);
            MemberList = result.Items;
            TotalCount = (int)result.TotalCount;
            await Notify.Success("Üye silindi");
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
    private async Task AddData()
    {
        try
        {
            var validate = true;
            if (CreateValidationsRef != null)
            {
                validate = await CreateValidationsRef.ValidateAll();
            }
            if (validate)
            {
                //await _exerciseService.AnyName(NewEntity.Name);
                var data = await _memberService.CreateAsync(NewEntity);

                var result = await _memberService.GetListAsync(Filter);
                MemberList = result.Items;
                TotalCount = (int)result.TotalCount;
                await InvokeAsync(CreateModal.Hide);
                await Notify.Success("Üye eklendi");
            }

        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task EditData()
    {
        try
        {
            var validate = true;
            if (EditValidationsRef != null)
            {
                validate = await EditValidationsRef.ValidateAll();
            }
            if (validate)
            {
                var data = await _memberService.UpdateAsync(EditingEntityId, EditingEntity);
                var result = await _memberService.GetListAsync(Filter);
                MemberList = result.Items;
                TotalCount = (int)result.TotalCount;
                await InvokeAsync(EditModal.Hide);
                await Notify.Success("Üye güncellendi");
            }

        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
}
